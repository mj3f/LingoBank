image: docker:latest

services:
  - docker:dind

variables:
  DOCKER_LOGIN_USER: ""
  DOCKER_LOGIN_PASSWORD: ""

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - package
  - publish
  # - deploy

build-job:       # Runs dotnet build to make sure no errors where found before building a docker image.
  stage: build
  script:
    - echo "Buliding solution..."
    - cd src
    - dotnet build

unit-test-job:   # Runs unit tests for project.
  stage: test
  script:
    - echo "Running unit tests..."
    - cd src
    - dotnet test

package-job:     # Packages the project as a docker image.
  stage: package
  only:
    - master
  script:
    - echo "Building docker image for project..."
    - docker build --tag LingoBank:$CI_COMMIT_REF_SLUG .
    - docker save -o LingoBank.tar LingoBank:$CI_COMMIT_REF_SLUG
  artifacts:
    paths:
      - LingoBank.tar

publish-job:    # Publishes the built docker image to gitlab container registry.
  stage: publish
  only:
    - master
  dependencies:
    - package
  script:
    - echo "Publishing built docker image to container registry..."
    - docker load -i LingoBank.tar
    - docker tag LingoBank:$CI_COMMIT_REF_SLUG registry.gitlab.com/msjp/LingoBank:$CI_COMMIT_REF_SLUG
    - docker push registry.gitlab.com/msjp/LingoBank:$CI_COMMIT_REF_SLUG
    - docker rmi LingoBank:$CI_COMMIT_REF_SLUG

# deploy-job:     # Deploys the project to cluster (eventually)
#   stage: deploy
#   only: 
#     - master
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
